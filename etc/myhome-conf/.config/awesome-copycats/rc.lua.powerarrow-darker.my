--[[
                                             
     Powerarrow Darker Awesome WM config 2.0 
     github.com/copycat-killer               
                                             
--]]

-- {{{ Required libraries
local gears     = require("gears")
local awful     = require("awful")
awful.rules     = require("awful.rules")
                  require("awful.autofocus")
local wibox     = require("wibox")
local beautiful = require("beautiful")
local naughty   = require("naughty")
local lain      = require("lain")
-- }}}

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Autostart applications
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

run_once("urxvtd")
run_once("unclutter -root")
-- }}}

-- {{{ Variable definitions
-- localization
os.setlocale(os.getenv("LANG"))

-- beautiful init
beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/powerarrow-darker/theme.lua")

-- common
modkey     = "Mod4"
altkey     = "Mod1"
terminal   = "uxterm" or "xterm"
editor     = os.getenv("EDITOR") or "nano" or "vi"
editor_cmd = terminal .. " -e " .. editor

-- user defined
browser    = "firefox-bin"
gui_editor = "gvim"
graphics   = "gimp"
mail       = terminal .. " -e mutt "
iptraf     = terminal .. " -g 180x54-20+34 -e sudo iptraf-ng -i all "
musicplr   = terminal .. " -g 130x34-320+16 -e ncmpcpp "

local layouts = {
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.right,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}

-- quake terminal
local quakeconsole = {}
for s = 1, screen.count() do
   quakeconsole[s] = lain.util.quake({ app = terminal })
end
-- }}}

-- {{{ Tags
tags = {
   names = { "网页", "终端", "远程终端", "远程桌面", "办公", "多媒体", "其它" },
   layout = { layouts[1], layouts[13], layouts[13], layouts[3], layouts[11], layouts[11], layouts[1] }
}

for s = 1, screen.count() do
   tags[s] = awful.tag(tags.names, s, tags.layout)
end
-- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    end
end
-- }}}

-- {{{ Menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "reload", awesome.restart },
   { "注销", awesome.quit },
   { "锁屏", "xscreensaver-command -lock" },
   { "休眠", "sudo hibernate-ram" },
   { "重启", "sudo systemctl reboot" },
   { "关机", "sudo systemctl poweroff" }
}

appsmenu = {
   { "播放器-XBMC", "xbmc" },
   { "播放器-Mocp", "xterm -T \"mocp\" -e mocp /home/chenbk/douban.fm/" },
   { "播放器-RadioGet", "xterm -T \"radioget\" -e radioget" },
   { "播放器-Audacious", "audacious" },
   { "播放器-Smplayer2", "smplayer2" },
   { "douban.fm", "xterm -T \"douban\" -e douban.fm" },
   { "画图-Gimp", "gimp" },
   { "虚拟机-VirtualBox", "VirtualBox" },
   { "下载-Qbittorrent", "qbittorrent" },
   { "下载-aMule", "amule" },
   { "下载-FileZilla", "filezilla" },
   { "远程-TeamViewer", "teamviewer8" },
   { "看图-ImageMagick", "display" },
   { "看图-gqview", "gqview /home/chenbk/04_Image" },
   { "聊天-Skype", "skype" },
   { "录音-Audacity", "audacity" },
   { "浏览器-firefox", "firefox-bin" },
   { "浏览器-chrome", "google-chrome-stable" },
   { "浏览器-Opera", "opera" },
   { "libreoffice-文本文档", "libreoffice --writer" },
   { "libreoffice-电子表格", "libreoffice --calc" },
   { "libreoffice-数据库", "libreoffice --base" },
   { "libreoffice-演示文稿", "libreoffice --draw" },
   { "librcad-CAD设计", "librecad" },
   { "邮箱-Thunderbird", "thunderbird-bin" },
   { "Dia设计", "dia" },
   { "Xmind设计", "xmind" },
   { "文本编辑-gvim", "gvim" },
   { "文本编辑-VSCode", "vscode" },
   { "文本编辑-PHP IDE", "phpstorm" },
   { "文本编辑-CodeBlocks", "codeblocks" },
   { "文本编辑-Sublime", "subl" },
   { "文本编辑-leafpad", "leafpad" },
   { "资源管理-mc", "xterm -T \"mc\" -e mc -S \"sand256\"" },
   { "资源管理-ranger", "xterm -T \"ranger\" -e ranger --confdir=~/.config/ranger" },
   { "资源管理-Pcmanfm", "pcmanfm" },
   { "Mysql管理工具", "mysql-workbench" },
   { "任务查看器-htop", terminal .. " -e htop" },
}

rdesktopmenu = {
   { "192.168.1.61_AD_SHAREPOINT" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.61" },
   { "192.168.1.82_统一维护机" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.82" },
   { "192.168.1.36_PREDEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.36" },
   { "192.168.23.216_ABSRV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.216" },
   { "192.168.23.219_DMQ" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.219" },
   { "192.168.23.220_点餐" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.220" },
   { "192.168.1.46_Slot_PREDEV1" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.46" },
   { "192.168.23.232_Slot_PREDEV2" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.232" },
   { "192.168.1.120_SD_DEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.120" },
   { "192.168.23.214_WSD_DEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.214" },
   { "192.168.23.215_WSD_PREDEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.215" },
   { "192.168.23.217_BD_PREDEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.217" },
   { "192.168.1.177_BD_DEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.177" },
   { "192.168.23.225_BD_DESDEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.225" },
   { "192.168.1.176_MCD_DEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.176" },
   { "192.168.23.233_MCD_PREDEV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.233" },
   { "192.168.23.230_MCD_DES" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.230" },
   { "192.168.23.231_MCD_QA" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.23.231" },
   { "192.168.1.184_BZB_FILES_SRV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.184" },
   { "192.168.1.182_SL_AD_SRV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.182" },
   { "192.168.1.181_SL_SPS_SRV" , "/home/chenbk/03_Shell/rdesktop.sh 192.168.1.181" },
}

sshmenu = {
   { "192.168.23.210_BZB_SVN_SRV" , "xterm -e ssh root@192.168.23.210" },
   { "192.168.23.228_BZB_QT_SRV" , "xterm -e ssh root@192.168.23.228" },
   { "192.168.23.223_BZB_NAGIOS" , "xterm -e ssh root@192.168.23.223" },
   { "192.168.23.222_BZB_DB_SRV" , "xterm -e ssh root@192.168.23.222" },
   { "192.168.23.204_BZB_REDMINE_TEST" , "xterm -e ssh root@192.168.23.204" },
   { "192.168.23.251_XS_VM01" , "xterm -e ssh root@192.168.23.251" },
   { "192.168.23.252_XS_VM02" , "xterm -e ssh root@192.168.23.252" },
   { "192.168.23.250_XS_VM03" , "xterm -e ssh root@192.168.23.250" },
   { "192.168.23.253_XS_VM04" , "xterm -e ssh root@192.168.23.253" },

}

mymainmenu = awful.menu({ items = {
                    { "截图-Scrot", "scrot -s /home/chenbk/04_Image/01_jietu/%Y-%m-%d_%H%m.png" },
                    { "awesome", myawesomemenu },
                    { "apps", appsmenu },
				    { "远程桌面", rdesktopmenu },
				    { "SSH连接", sshmenu },
                    { "terminal", terminal },
				    { "Firefox", "firefox-bin" },
				    { "FileZilla", "filezilla" },
				    { "Gvim", "gvim" },
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
markup = lain.util.markup
separators = lain.util.separators

-- Textclock
clockicon = wibox.widget.imagebox(beautiful.widget_clock)
--mytextclock = awful.widget.textclock(" %a %d %b  %H:%M")

mytextclock = lain.widgets.abase({
    timeout  = 60,
    cmd      = "date +'%a %d %b %R'",
    settings = function()
        widget:set_text(" " .. output)
    end
})

-- calendar
lain.widgets.calendar:attach(mytextclock, { font_size = 10 })

-- Mail IMAP check
mailicon = wibox.widget.imagebox(beautiful.widget_mail)
mailicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(mail) end)))
--[[ commented because it needs to be set before use
mailwidget = lain.widgets.imap({
    timeout  = 180,
    server   = "server",
    mail     = "mail",
    password = "keyring get mail",
    settings = function()
        if mailcount > 0 then
            widget:set_text(" " .. mailcount .. " ")
            mailicon:set_image(beautiful.widget_mail_on)
        else
            widget:set_text("")
            mailicon:set_image(beautiful.widget_mail)
        end
    end
})
]]

-- MPD
mpdicon = wibox.widget.imagebox(beautiful.widget_music)
mpdicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(musicplr) end)))
mpdwidget = lain.widgets.mpd({
    settings = function()
        if mpd_now.state == "play" then
            artist = " " .. mpd_now.artist .. " "
            title  = mpd_now.title  .. " "
            mpdicon:set_image(beautiful.widget_music_on)
        elseif mpd_now.state == "pause" then
            artist = " mpd "
            title  = "paused "
        else
            artist = ""
            title  = ""
            mpdicon:set_image(beautiful.widget_music)
        end

        widget:set_markup(markup("#EA6F81", artist) .. title)
    end
})

-- MEM
memicon = wibox.widget.imagebox(beautiful.widget_mem)
memwidget = lain.widgets.mem({
    settings = function()
        widget:set_text(" " .. mem_now.used .. "MB ")
    end
})

-- CPU
cpuicon = wibox.widget.imagebox(beautiful.widget_cpu)
cpuwidget = lain.widgets.cpu({
    settings = function()
        widget:set_text(" " .. cpu_now.usage .. "% ")
    end
})

-- Coretemp
tempicon = wibox.widget.imagebox(beautiful.widget_temp)
tempwidget = lain.widgets.temp({
    settings = function()
        widget:set_text(" " .. coretemp_now .. "°C ")
    end
})

-- / fs
fsicon = wibox.widget.imagebox(beautiful.widget_hdd)
fswidget = lain.widgets.fs({
    settings  = function()
        widget:set_text(" " .. fs_now.used .. "% ")
    end
})

-- Battery
baticon = wibox.widget.imagebox(beautiful.widget_battery)
batwidget = lain.widgets.bat({
    settings = function()
        if bat_now.status ~= "N/A" then
            if bat_now.ac_status == 1 then
                widget:set_markup(" AC ")
                baticon:set_image(beautiful.widget_ac)
                return
            elseif tonumber(bat_now.perc) <= 5 then
                baticon:set_image(beautiful.widget_battery_empty)
            elseif tonumber(bat_now.perc) <= 15 then
                baticon:set_image(beautiful.widget_battery_low)
            else
                baticon:set_image(beautiful.widget_battery)
            end
            widget:set_markup(" " .. bat_now.perc .. "% ")
        else
            baticon:set_image(beautiful.widget_ac)
        end
    end
})

-- ALSA volume
volicon = wibox.widget.imagebox(beautiful.widget_vol)
volumewidget = lain.widgets.alsa({
    settings = function()
        if volume_now.status == "off" then
            volicon:set_image(beautiful.widget_vol_mute)
        elseif tonumber(volume_now.level) == 0 then
            volicon:set_image(beautiful.widget_vol_no)
        elseif tonumber(volume_now.level) <= 50 then
            volicon:set_image(beautiful.widget_vol_low)
        else
            volicon:set_image(beautiful.widget_vol)
        end

        widget:set_text(" " .. volume_now.level .. "% ")
    end
})

-- Net
neticon = wibox.widget.imagebox(beautiful.widget_net)
neticon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(iptraf) end)))
netwidget = lain.widgets.net({
    settings = function()
        widget:set_markup(markup("#7AC82E", " " .. net_now.received)
                          .. " " ..
                          markup("#46A8C3", " " .. net_now.sent .. " "))
    end
})

-- Separators
spr = wibox.widget.textbox(' ')
arrl_dl = separators.arrow_left(beautiful.bg_focus, "alpha")
arrl_ld = separators.arrow_left("alpha", beautiful.bg_focus)

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do

    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()

    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                            awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                            awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                            awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                            awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))

    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s, height = 18 })

    -- Widgets that are aligned to the upper left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(spr)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])
    left_layout:add(spr)

    -- Widgets that are aligned to the upper right
    local right_layout_toggle = true
    local function right_layout_add (...)
        local arg = {...}
        if right_layout_toggle then
            right_layout:add(arrl_ld)
            for i, n in pairs(arg) do
                right_layout:add(wibox.widget.background(n ,beautiful.bg_focus))
            end
        else
            right_layout:add(arrl_dl)
            for i, n in pairs(arg) do
                right_layout:add(n)
            end
        end
        right_layout_toggle = not right_layout_toggle
    end

    right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(spr)
    right_layout_add(mpdicon, mpdwidget)
    right_layout_add(volicon, volumewidget)
    --right_layout_add(mailicon, mailwidget)
    right_layout_add(memicon, memwidget)
    right_layout_add(cpuicon, cpuwidget)
    right_layout_add(tempicon, tempwidget)
    right_layout_add(fsicon, fswidget)
    right_layout_add(baticon, batwidget)
    right_layout_add(neticon,netwidget)
    right_layout_add(mytextclock, spr)
    right_layout_add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)
    mywibox[s]:set_widget(layout)

end
-- }}}

-- {{{ Mouse Bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    -- Take a screenshot
    -- https://github.com/copycat-killer/dots/blob/master/bin/screenshot
    awful.key({ altkey }, "p", function() os.execute("screenshot") end),

    -- Tag browsing
    awful.key({ modkey }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey }, "Escape", awful.tag.history.restore),

    -- Non-empty tag browsing
    awful.key({ altkey }, "Left", function () lain.util.tag_view_nonempty(-1) end),
    awful.key({ altkey }, "Right", function () lain.util.tag_view_nonempty(1) end),

    -- Default client focus
    awful.key({ altkey }, "k",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ altkey }, "j",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),

    -- By direction client focus
    awful.key({ modkey }, "j",
        function()
            awful.client.focus.bydirection("down")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "k",
        function()
            awful.client.focus.bydirection("up")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "h",
        function()
            awful.client.focus.bydirection("left")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "l",
        function()
            awful.client.focus.bydirection("right")
            if client.focus then client.focus:raise() end
        end),

    -- Show Menu
    awful.key({ modkey }, "w",
        function ()
            mymainmenu:show({ keygrabber = true })
        end),

    -- Show/Hide Wibox
    awful.key({ modkey }, "b", function ()
        mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible
    end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),
    awful.key({ altkey, "Shift"   }, "l",      function () awful.tag.incmwfact( 0.05)     end),
    awful.key({ altkey, "Shift"   }, "h",      function () awful.tag.incmwfact(-0.05)     end),
    awful.key({ modkey, "Shift"   }, "l",      function () awful.tag.incnmaster(-1)       end),
    awful.key({ modkey, "Shift"   }, "h",      function () awful.tag.incnmaster( 1)       end),
    awful.key({ modkey, "Control" }, "l",      function () awful.tag.incncol(-1)          end),
    awful.key({ modkey, "Control" }, "h",      function () awful.tag.incncol( 1)          end),
    awful.key({ modkey,           }, "space",  function () awful.layout.inc(layouts,  1)  end),
    awful.key({ modkey, "Shift"   }, "space",  function () awful.layout.inc(layouts, -1)  end),
    awful.key({ modkey, "Control" }, "n",      awful.client.restore),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r",      awesome.restart),
    awful.key({ modkey, "Shift"   }, "q",      awesome.quit),

    -- Start My program
    awful.key({ "Control", "Shift" }, "f", function () awful.util.spawn("firefox-bin") end),
    awful.key({ "Control", "Shift" }, "p", function () awful.util.spawn("smplayer") end),
    awful.key({ "Control", "Shift" }, "q", function () awful.util.spawn("~/01_Shell/lcd_off.sh") end),
    awful.key({ "Control", "Shift" }, "r", function () awful.util.spawn("xterm -T \"File Manager\" ranger") end),
    awful.key({ "Control", "Shift" }, "a", function () awful.util.spawn("~/01_Shell/scrot.sh") end),
    awful.key({ "Control", "Shift" }, "v", function () awful.util.spawn("xterm -T \"VIM\" -e nvim") end),
    awful.key({ "Control", "Shift" }, "m", function () awful.util.spawn("thunderbird-bin") end),
    awful.key({ "Control", "Shift" }, "n", function () awful.util.spawn("xterm -T \"Newsbeuter RSS Reader\" -e newsbeuter") end),

    -- Dropdown terminal
    awful.key({ modkey,	          }, "z",      function () quakeconsole[mouse.screen]:toggle() end),

    -- Widgets popups
    awful.key({ altkey,           }, "c",      function () lain.widgets.calendar:show(7) end),
    awful.key({ altkey,           }, "h",      function () fswidget.show(7) end),

    -- ALSA volume control
    awful.key({ altkey }, "Up",
        function ()
            os.execute(string.format("amixer set %s 1%%+", volumewidget.channel))
            volumewidget.update()
        end),
    awful.key({ altkey }, "Down",
        function ()
            os.execute(string.format("amixer set %s 1%%-", volumewidget.channel))
            volumewidget.update()
        end),
    awful.key({ altkey }, "m",
        function ()
            os.execute(string.format("amixer set %s toggle", volumewidget.channel))
            volumewidget.update()
        end),
    awful.key({ altkey, "Control" }, "m",
        function ()
            os.execute(string.format("amixer set %s 100%%", volumewidget.channel))
            volumewidget.update()
        end),

    -- MPD control
    awful.key({ altkey, "Control" }, "Up",
        function ()
            awful.util.spawn_with_shell("mpc toggle || ncmpc toggle || pms toggle")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Down",
        function ()
            awful.util.spawn_with_shell("mpc stop || ncmpc stop || pms stop")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Left",
        function ()
            awful.util.spawn_with_shell("mpc prev || ncmpc prev || pms prev")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Right",
        function ()
            awful.util.spawn_with_shell("mpc next || ncmpc next || pms next")
            mpdwidget.update()
        end),

    -- Copy to clipboard
    awful.key({ modkey }, "c", function () awful.util.spawn("xsel -p -o | xsel -i -b") end),

    -- User programs
    awful.key({ modkey }, "q", function () awful.util.spawn(browser) end),
    awful.key({ modkey }, "s", function () awful.util.spawn(gui_editor) end),
    awful.key({ modkey }, "g", function () awful.util.spawn(graphics) end),

    -- Prompt
    awful.key({ modkey }, "x", function ()
        awful.util.spawn(string.format("dmenu_run -i -fn 'Tamsyn' -nb '%s' -nf '%s' -sb '%s' -sf '%s'",
        beautiful.bg_normal, beautiful.fg_normal, beautiful.bg_focus, beautiful.fg_focus))
		end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Bind all key numbers to tags.
-- be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = awful.util.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        local tag = awful.tag.gettags(screen)[i]
                        if tag then
                           awful.tag.viewonly(tag)
                        end
                  end),
        -- Toggle tag.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      local tag = awful.tag.gettags(screen)[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = awful.tag.gettags(client.focus.screen)[i]
                          if tag then
                              awful.client.movetotag(tag)
                          end
                     end
                  end),
        -- Toggle tag.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = awful.tag.gettags(client.focus.screen)[i]
                          if tag then
                              awful.client.toggletag(tag)
                          end
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons,
	                   size_hints_honor = false } },
   {rule = {class = "MPlayer"},
    properties = {floating = true, tag = tags[1][6]}},
   {rule = {class = "xbmc"},
    properties = {floating = true, tag = tags[1][6]}},
   {rule = {class = "Smplayer"},
    properties = {floating = true, tag = tags[1][6]}},
   { rule = {class = "pinentry" },
     properties = { floating = true } },
   { rule = {class = "gimp" },
     properties = { floating = true, tag = tags[1][5] } },
   { rule = { name="mc" },
     properties = { tag = tags[1][5] } },
   { rule = { name="ranger" },
     properties = { tag = tags[1][5] } },
   { rule = { class = "Pcmanfm" },
     properties = { tag = tags[1][5] } },
   {rule = {class = "newsbeuter"},
     properties = {tag = tags[1][1]}},
   {rule = {class = "Firefox"},
     properties = {tag = tags[1][1]}},
   {rule = {class = "Firefox", name = "Download"},
     properties = {floating = true}},
   {rule = {class = "VirtualBox"},
     properties = {floating = true, tag = tags[1][7]}},
   {rule = {name = "ssh"},
     properties = {tag = tags[1][3]}},
   {rule = {name = "rdesktop_freerdp"},
     properties = {tag = tags[1][4]}},
   {rule = {name = "rdesktop"},
     properties = {tag = tags[1][4]}},
--   {rule = {class = "libreoffice"},
--     properties = {tag = tags[1][5]}},
   {rule = {name = "cli"},
     properties = {tag = tags[1][2]}},
   {rule = {name = "douban.fm"},
     properties = {tag = tags[1][6]}},
   {rule = {name = "mocp"},
     properties = {tag = tags[1][6]}},
   {rule = {name = "RadioGet V0.2.4"},
     properties = {tag = tags[1][6]}},
   {rule = {name = "radioget"},
     properties = {tag = tags[1][6]}},
   -- Set Firefox to always map on tags number 2 of screen 1.
   --{ rule = { class = "Firefox" },
   -- properties = { tag = tags[1][2] } },
   -- Set Firefox to always map on tags number 2 of screen 1.
}
-- }}}

-- {{{ Signals
-- signal function to execute when a new client appears.
local sloppyfocus_last = {c=nil}
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    client.connect_signal("mouse::enter", function(c)
         if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
             -- Skip focusing the client if the mouse wasn't moved.
             if c ~= sloppyfocus_last.c then
                 client.focus = c
                 sloppyfocus_last.c = c
             end
         end
     end)

    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- buttons for the titlebar
        local buttons = awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                )

        -- widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- the title goes in the middle
        local middle_layout = wibox.layout.flex.horizontal()
        local title = awful.titlebar.widget.titlewidget(c)
        title:set_align("center")
        middle_layout:add(title)
        middle_layout:buttons(buttons)

        -- now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_right(right_layout)
        layout:set_middle(middle_layout)

        awful.titlebar(c,{size=16}):set_widget(layout)
    end
end)

-- No border for maximized or single clients
client.connect_signal("focus",
    function(c)
        if c.maximized_horizontal == true and c.maximized_vertical == true then
            c.border_width = 0
        elseif #awful.client.visible(mouse.screen) > 1 then
            c.border_width = beautiful.border_width
            c.border_color = beautiful.border_focus
        end
    end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Arrange signal handler
for s = 1, screen.count() do screen[s]:connect_signal("arrange",
    function ()
        local clients = awful.client.visible(s)
        local layout  = awful.layout.getname(awful.layout.get(s))

        if #clients > 0 then
            for _, c in pairs(clients) do -- Floaters always have borders
                if awful.client.floating.get(c) or layout == "floating" then
                    c.border_width = beautiful.border_width
                end
            end
        end
    end)
end
-- }}}

-- {{{ 自启动项
-- Autorun programs
autorun = true
autorunApps =
{
    "fcitx",
    "firefox-bin",
    "stardict",
    "xterm -T \"newsbeuter\" -e newsbeuter",
--  "xterm -T \"radioget\" -e radioget",
--  "xterm -T \"rdesktop\" -e /home/chenbk/01_Shell/rdesktop.sh",
--  "xterm -T \"ssh\" -e /home/chenbk/01_Shell/ssh.sh",
--  "xterm -T \"rdesktop_freerdp\" -e /home/chenbk/01_Shell/rdesktop_freerdp.sh 192.168.23.6",
    "xterm -T \"cli\"",
    "xterm -T \"cli\"",
--  "xterm -T \"mc\" -e mc -S \"sand256\"",
    "xterm -T \"ranger\" -e ranger --confdir=~/.config/ranger",
--  "VirtualBox",
--  "pcmanfm",
--  "~/.conky/bin/conkyStart",
--  "sudo killall mplayer",
}

if autorun then
    for app = 1, #autorunApps do
        awful.util.spawn_with_shell(autorunApps[app])
    end
end
-- }}}
